// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(49)
            {
                { typeof(global::System.Collections.Generic.Dictionary<global::Staple.AppPlatform, global::System.Collections.Generic.List<global::Staple.RendererType>>), 0 },
                { typeof(global::System.Collections.Generic.Dictionary<string, global::Staple.Internal.MaterialParameter>), 1 },
                { typeof(global::System.Collections.Generic.List<global::Staple.ColliderMask.Item>), 2 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.SceneComponent>), 3 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.SceneComponentParameter>), 4 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.SceneObject>), 5 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.ShaderUniform>), 6 },
                { typeof(global::System.Collections.Generic.List<global::Staple.RendererType>), 7 },
                { typeof(global::System.Collections.Generic.List<string>), 8 },
                { typeof(global::Staple.AppPlatform), 9 },
                { typeof(global::Staple.BlendMode), 10 },
                { typeof(global::Staple.Internal.MaterialParameterType), 11 },
                { typeof(global::Staple.Internal.SceneComponentParameterType), 12 },
                { typeof(global::Staple.Internal.SceneObjectKind), 13 },
                { typeof(global::Staple.Internal.ShaderType), 14 },
                { typeof(global::Staple.Internal.ShaderUniformType), 15 },
                { typeof(global::Staple.Internal.TextureFilter), 16 },
                { typeof(global::Staple.Internal.TextureMetadataFormat), 17 },
                { typeof(global::Staple.Internal.TextureMetadataQuality), 18 },
                { typeof(global::Staple.Internal.TextureType), 19 },
                { typeof(global::Staple.Internal.TextureWrap), 20 },
                { typeof(global::Staple.RendererType), 21 },
                { typeof(global::Staple.WindowMode), 22 },
                { typeof(global::Staple.AppSettings), 23 },
                { typeof(global::Staple.ColliderMask.Item), 24 },
                { typeof(global::Staple.Color32), 25 },
                { typeof(global::Staple.Internal.AppSettingsHeader), 26 },
                { typeof(global::Staple.Internal.MaterialMetadata), 27 },
                { typeof(global::Staple.Internal.MaterialParameter), 28 },
                { typeof(global::Staple.Internal.SceneComponent), 29 },
                { typeof(global::Staple.Internal.SceneComponentParameter), 30 },
                { typeof(global::Staple.Internal.SceneList), 31 },
                { typeof(global::Staple.Internal.SceneListHeader), 32 },
                { typeof(global::Staple.Internal.SceneObject), 33 },
                { typeof(global::Staple.Internal.SceneObjectTransform), 34 },
                { typeof(global::Staple.Internal.SerializableMaterial), 35 },
                { typeof(global::Staple.Internal.SerializableMaterialHeader), 36 },
                { typeof(global::Staple.Internal.SerializableScene), 37 },
                { typeof(global::Staple.Internal.SerializableSceneHeader), 38 },
                { typeof(global::Staple.Internal.SerializableShader), 39 },
                { typeof(global::Staple.Internal.SerializableShaderHeader), 40 },
                { typeof(global::Staple.Internal.SerializableTexture), 41 },
                { typeof(global::Staple.Internal.SerializableTextureHeader), 42 },
                { typeof(global::Staple.Internal.ShaderMetadata), 43 },
                { typeof(global::Staple.Internal.ShaderUniform), 44 },
                { typeof(global::Staple.Internal.TextureMetadata), 45 },
                { typeof(global::Staple.Internal.Vector2Holder), 46 },
                { typeof(global::Staple.Internal.Vector3Holder), 47 },
                { typeof(global::Staple.Internal.Vector4Holder), 48 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.DictionaryFormatter<global::Staple.AppPlatform, global::System.Collections.Generic.List<global::Staple.RendererType>>();
                case 1: return new global::MessagePack.Formatters.DictionaryFormatter<string, global::Staple.Internal.MaterialParameter>();
                case 2: return new global::MessagePack.Formatters.ListFormatter<global::Staple.ColliderMask.Item>();
                case 3: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.SceneComponent>();
                case 4: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.SceneComponentParameter>();
                case 5: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.SceneObject>();
                case 6: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.ShaderUniform>();
                case 7: return new global::MessagePack.Formatters.ListFormatter<global::Staple.RendererType>();
                case 8: return new global::MessagePack.Formatters.ListFormatter<string>();
                case 9: return new MessagePack.Formatters.Staple.AppPlatformFormatter();
                case 10: return new MessagePack.Formatters.Staple.BlendModeFormatter();
                case 11: return new MessagePack.Formatters.Staple.Internal.MaterialParameterTypeFormatter();
                case 12: return new MessagePack.Formatters.Staple.Internal.SceneComponentParameterTypeFormatter();
                case 13: return new MessagePack.Formatters.Staple.Internal.SceneObjectKindFormatter();
                case 14: return new MessagePack.Formatters.Staple.Internal.ShaderTypeFormatter();
                case 15: return new MessagePack.Formatters.Staple.Internal.ShaderUniformTypeFormatter();
                case 16: return new MessagePack.Formatters.Staple.Internal.TextureFilterFormatter();
                case 17: return new MessagePack.Formatters.Staple.Internal.TextureMetadataFormatFormatter();
                case 18: return new MessagePack.Formatters.Staple.Internal.TextureMetadataQualityFormatter();
                case 19: return new MessagePack.Formatters.Staple.Internal.TextureTypeFormatter();
                case 20: return new MessagePack.Formatters.Staple.Internal.TextureWrapFormatter();
                case 21: return new MessagePack.Formatters.Staple.RendererTypeFormatter();
                case 22: return new MessagePack.Formatters.Staple.WindowModeFormatter();
                case 23: return new MessagePack.Formatters.Staple.AppSettingsFormatter();
                case 24: return new MessagePack.Formatters.Staple.ColliderMask_ItemFormatter();
                case 25: return new MessagePack.Formatters.Staple.Color32Formatter();
                case 26: return new MessagePack.Formatters.Staple.Internal.AppSettingsHeaderFormatter();
                case 27: return new MessagePack.Formatters.Staple.Internal.MaterialMetadataFormatter();
                case 28: return new MessagePack.Formatters.Staple.Internal.MaterialParameterFormatter();
                case 29: return new MessagePack.Formatters.Staple.Internal.SceneComponentFormatter();
                case 30: return new MessagePack.Formatters.Staple.Internal.SceneComponentParameterFormatter();
                case 31: return new MessagePack.Formatters.Staple.Internal.SceneListFormatter();
                case 32: return new MessagePack.Formatters.Staple.Internal.SceneListHeaderFormatter();
                case 33: return new MessagePack.Formatters.Staple.Internal.SceneObjectFormatter();
                case 34: return new MessagePack.Formatters.Staple.Internal.SceneObjectTransformFormatter();
                case 35: return new MessagePack.Formatters.Staple.Internal.SerializableMaterialFormatter();
                case 36: return new MessagePack.Formatters.Staple.Internal.SerializableMaterialHeaderFormatter();
                case 37: return new MessagePack.Formatters.Staple.Internal.SerializableSceneFormatter();
                case 38: return new MessagePack.Formatters.Staple.Internal.SerializableSceneHeaderFormatter();
                case 39: return new MessagePack.Formatters.Staple.Internal.SerializableShaderFormatter();
                case 40: return new MessagePack.Formatters.Staple.Internal.SerializableShaderHeaderFormatter();
                case 41: return new MessagePack.Formatters.Staple.Internal.SerializableTextureFormatter();
                case 42: return new MessagePack.Formatters.Staple.Internal.SerializableTextureHeaderFormatter();
                case 43: return new MessagePack.Formatters.Staple.Internal.ShaderMetadataFormatter();
                case 44: return new MessagePack.Formatters.Staple.Internal.ShaderUniformFormatter();
                case 45: return new MessagePack.Formatters.Staple.Internal.TextureMetadataFormatter();
                case 46: return new MessagePack.Formatters.Staple.Internal.Vector2HolderFormatter();
                case 47: return new MessagePack.Formatters.Staple.Internal.Vector3HolderFormatter();
                case 48: return new MessagePack.Formatters.Staple.Internal.Vector4HolderFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Staple
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class AppPlatformFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.AppPlatform>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.AppPlatform value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.AppPlatform Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.AppPlatform)reader.ReadInt32();
        }
    }

    public sealed class BlendModeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.BlendMode>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.BlendMode value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((UInt64)value);
        }

        public global::Staple.BlendMode Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.BlendMode)reader.ReadUInt64();
        }
    }

    public sealed class RendererTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.RendererType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.RendererType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.RendererType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.RendererType)reader.ReadInt32();
        }
    }

    public sealed class WindowModeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.WindowMode>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.WindowMode value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.WindowMode Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.WindowMode)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Staple.Internal
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class MaterialParameterTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.MaterialParameterType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.MaterialParameterType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.MaterialParameterType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.MaterialParameterType)reader.ReadInt32();
        }
    }

    public sealed class SceneComponentParameterTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SceneComponentParameterType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.SceneComponentParameterType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.SceneComponentParameterType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.SceneComponentParameterType)reader.ReadInt32();
        }
    }

    public sealed class SceneObjectKindFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SceneObjectKind>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.SceneObjectKind value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.SceneObjectKind Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.SceneObjectKind)reader.ReadInt32();
        }
    }

    public sealed class ShaderTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.ShaderType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.ShaderType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.ShaderType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.ShaderType)reader.ReadInt32();
        }
    }

    public sealed class ShaderUniformTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.ShaderUniformType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.ShaderUniformType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.ShaderUniformType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.ShaderUniformType)reader.ReadInt32();
        }
    }

    public sealed class TextureFilterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.TextureFilter>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.TextureFilter value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.TextureFilter Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.TextureFilter)reader.ReadInt32();
        }
    }

    public sealed class TextureMetadataFormatFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.TextureMetadataFormat>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.TextureMetadataFormat value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.TextureMetadataFormat Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.TextureMetadataFormat)reader.ReadInt32();
        }
    }

    public sealed class TextureMetadataQualityFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.TextureMetadataQuality>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.TextureMetadataQuality value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.TextureMetadataQuality Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.TextureMetadataQuality)reader.ReadInt32();
        }
    }

    public sealed class TextureTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.TextureType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.TextureType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.TextureType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.TextureType)reader.ReadInt32();
        }
    }

    public sealed class TextureWrapFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.TextureWrap>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.TextureWrap value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.TextureWrap Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.TextureWrap)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Staple
{
    using global::System.Buffers;
    using global::MessagePack;

    public sealed class AppSettingsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.AppSettings>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.AppSettings value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(12);
            writer.Write(value.runInBackground);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.appName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.companyName, options);
            writer.Write(value.fixedTimeFrameRate);
            writer.Write(value.multiThreadedRenderer);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.layers, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.sortingLayers, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::Staple.AppPlatform, global::System.Collections.Generic.List<global::Staple.RendererType>>>().Serialize(ref writer, value.renderers, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.WindowMode>().Serialize(ref writer, value.defaultWindowMode, options);
            writer.Write(value.defaultWindowWidth);
            writer.Write(value.defaultWindowHeight);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.ColliderMask.Item>>().Serialize(ref writer, value.colliderMask, options);
        }

        public global::Staple.AppSettings Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.AppSettings();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.runInBackground = reader.ReadBoolean();
                        break;
                    case 1:
                        ____result.appName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.companyName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.fixedTimeFrameRate = reader.ReadInt32();
                        break;
                    case 4:
                        ____result.multiThreadedRenderer = reader.ReadBoolean();
                        break;
                    case 5:
                        ____result.layers = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.sortingLayers = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        ____result.renderers = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::Staple.AppPlatform, global::System.Collections.Generic.List<global::Staple.RendererType>>>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        ____result.defaultWindowMode = formatterResolver.GetFormatterWithVerify<global::Staple.WindowMode>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        ____result.defaultWindowWidth = reader.ReadInt32();
                        break;
                    case 10:
                        ____result.defaultWindowHeight = reader.ReadInt32();
                        break;
                    case 11:
                        ____result.colliderMask = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.ColliderMask.Item>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ColliderMask_ItemFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.ColliderMask.Item>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.ColliderMask.Item value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(3);
            writer.Write(value.A);
            writer.Write(value.B);
            writer.Write(value.value);
        }

        public global::Staple.ColliderMask.Item Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.ColliderMask.Item();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.A = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.B = reader.ReadInt32();
                        break;
                    case 2:
                        ____result.value = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Color32Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Color32>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Color32 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(4);
            writer.Write(value.r);
            writer.Write(value.g);
            writer.Write(value.b);
            writer.Write(value.a);
        }

        public global::Staple.Color32 Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __r__ = default(byte);
            var __g__ = default(byte);
            var __b__ = default(byte);
            var __a__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __r__ = reader.ReadByte();
                        break;
                    case 1:
                        __g__ = reader.ReadByte();
                        break;
                    case 2:
                        __b__ = reader.ReadByte();
                        break;
                    case 3:
                        __a__ = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Staple.Color32(__r__, __g__, __b__, __a__);
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Staple.Internal
{
    using global::System.Buffers;
    using global::MessagePack;

    public sealed class AppSettingsHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.AppSettingsHeader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.AppSettingsHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<char[]>().Serialize(ref writer, value.header, options);
            writer.Write(value.version);
        }

        public global::Staple.Internal.AppSettingsHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.AppSettingsHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.header = formatterResolver.GetFormatterWithVerify<char[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.version = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MaterialMetadataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.MaterialMetadata>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.MaterialMetadata value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.guid, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.shaderPath, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::Staple.Internal.MaterialParameter>>().Serialize(ref writer, value.parameters, options);
        }

        public global::Staple.Internal.MaterialMetadata Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.MaterialMetadata();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.guid = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.shaderPath = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.parameters = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::Staple.Internal.MaterialParameter>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MaterialParameterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.MaterialParameter>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.MaterialParameter value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MaterialParameterType>().Serialize(ref writer, value.type, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector2Holder>().Serialize(ref writer, value.vec2Value, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Serialize(ref writer, value.vec3Value, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector4Holder>().Serialize(ref writer, value.vec4Value, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.textureValue, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Color32>().Serialize(ref writer, value.colorValue, options);
        }

        public global::Staple.Internal.MaterialParameter Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.MaterialParameter();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.type = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MaterialParameterType>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.vec2Value = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector2Holder>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.vec3Value = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.vec4Value = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector4Holder>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.textureValue = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.colorValue = formatterResolver.GetFormatterWithVerify<global::Staple.Color32>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SceneComponentFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SceneComponent>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SceneComponent value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.type, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.SceneComponentParameter>>().Serialize(ref writer, value.parameters, options);
        }

        public global::Staple.Internal.SceneComponent Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SceneComponent();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.type = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.parameters = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.SceneComponentParameter>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SceneComponentParameterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SceneComponentParameter>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SceneComponentParameter value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.SceneComponentParameterType>().Serialize(ref writer, value.type, options);
            writer.Write(value.boolValue);
            writer.Write(value.intValue);
            writer.Write(value.floatValue);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.stringValue, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector2Holder>().Serialize(ref writer, value.vector2Value, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Serialize(ref writer, value.vector3Value, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector4Holder>().Serialize(ref writer, value.vector4Value, options);
        }

        public global::Staple.Internal.SceneComponentParameter Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SceneComponentParameter();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.name = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.type = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.SceneComponentParameterType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.boolValue = reader.ReadBoolean();
                        break;
                    case 3:
                        ____result.intValue = reader.ReadInt32();
                        break;
                    case 4:
                        ____result.floatValue = reader.ReadSingle();
                        break;
                    case 5:
                        ____result.stringValue = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.vector2Value = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector2Holder>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        ____result.vector3Value = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        ____result.vector4Value = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector4Holder>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SceneListFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SceneList>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SceneList value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.scenes, options);
        }

        public global::Staple.Internal.SceneList Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SceneList();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.scenes = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SceneListHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SceneListHeader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SceneListHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<char[]>().Serialize(ref writer, value.header, options);
            writer.Write(value.version);
        }

        public global::Staple.Internal.SceneListHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SceneListHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.header = formatterResolver.GetFormatterWithVerify<char[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.version = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SceneObjectFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SceneObject>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SceneObject value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.SceneObjectKind>().Serialize(ref writer, value.kind, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
            writer.Write(value.ID);
            writer.Write(value.parent);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.SceneObjectTransform>().Serialize(ref writer, value.transform, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.SceneComponent>>().Serialize(ref writer, value.components, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.layer, options);
        }

        public global::Staple.Internal.SceneObject Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SceneObject();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.kind = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.SceneObjectKind>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.name = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.ID = reader.ReadInt32();
                        break;
                    case 3:
                        ____result.parent = reader.ReadInt32();
                        break;
                    case 4:
                        ____result.transform = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.SceneObjectTransform>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.components = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.SceneComponent>>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.layer = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SceneObjectTransformFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SceneObjectTransform>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SceneObjectTransform value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Serialize(ref writer, value.position, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Serialize(ref writer, value.rotation, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Serialize(ref writer, value.scale, options);
        }

        public global::Staple.Internal.SceneObjectTransform Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SceneObjectTransform();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.position = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.rotation = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.scale = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableMaterialFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableMaterial>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableMaterial value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MaterialMetadata>().Serialize(ref writer, value.metadata, options);
        }

        public global::Staple.Internal.SerializableMaterial Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableMaterial();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.metadata = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MaterialMetadata>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableMaterialHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableMaterialHeader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableMaterialHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<char[]>().Serialize(ref writer, value.header, options);
            writer.Write(value.version);
        }

        public global::Staple.Internal.SerializableMaterialHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableMaterialHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.header = formatterResolver.GetFormatterWithVerify<char[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.version = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableSceneFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableScene>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableScene value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.SceneObject>>().Serialize(ref writer, value.objects, options);
        }

        public global::Staple.Internal.SerializableScene Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableScene();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.objects = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.SceneObject>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableSceneHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableSceneHeader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableSceneHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<char[]>().Serialize(ref writer, value.header, options);
            writer.Write(value.version);
        }

        public global::Staple.Internal.SerializableSceneHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableSceneHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.header = formatterResolver.GetFormatterWithVerify<char[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.version = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableShaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableShader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableShader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.ShaderMetadata>().Serialize(ref writer, value.metadata, options);
            writer.Write(value.vertexShader);
            writer.Write(value.fragmentShader);
            writer.Write(value.computeShader);
        }

        public global::Staple.Internal.SerializableShader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableShader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.metadata = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.ShaderMetadata>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.vertexShader = reader.ReadBytes()?.ToArray();
                        break;
                    case 2:
                        ____result.fragmentShader = reader.ReadBytes()?.ToArray();
                        break;
                    case 3:
                        ____result.computeShader = reader.ReadBytes()?.ToArray();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableShaderHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableShaderHeader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableShaderHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<char[]>().Serialize(ref writer, value.header, options);
            writer.Write(value.version);
        }

        public global::Staple.Internal.SerializableShaderHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableShaderHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.header = formatterResolver.GetFormatterWithVerify<char[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.version = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableTextureFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableTexture>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableTexture value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureMetadata>().Serialize(ref writer, value.metadata, options);
            writer.Write(value.data);
        }

        public global::Staple.Internal.SerializableTexture Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableTexture();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.metadata = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureMetadata>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.data = reader.ReadBytes()?.ToArray();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableTextureHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableTextureHeader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableTextureHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<char[]>().Serialize(ref writer, value.header, options);
            writer.Write(value.version);
        }

        public global::Staple.Internal.SerializableTextureHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableTextureHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.header = formatterResolver.GetFormatterWithVerify<char[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.version = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ShaderMetadataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.ShaderMetadata>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.ShaderMetadata value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.guid, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.ShaderType>().Serialize(ref writer, value.type, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.ShaderUniform>>().Serialize(ref writer, value.uniforms, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.BlendMode>().Serialize(ref writer, value.sourceBlend, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.BlendMode>().Serialize(ref writer, value.destinationBlend, options);
        }

        public global::Staple.Internal.ShaderMetadata Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.ShaderMetadata();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.guid = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.type = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.ShaderType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.uniforms = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.ShaderUniform>>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.sourceBlend = formatterResolver.GetFormatterWithVerify<global::Staple.BlendMode>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.destinationBlend = formatterResolver.GetFormatterWithVerify<global::Staple.BlendMode>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ShaderUniformFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.ShaderUniform>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.ShaderUniform value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.ShaderUniformType>().Serialize(ref writer, value.type, options);
        }

        public global::Staple.Internal.ShaderUniform Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.ShaderUniform();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.name = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.type = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.ShaderUniformType>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TextureMetadataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.TextureMetadata>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.TextureMetadata value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(14);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.guid, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureType>().Serialize(ref writer, value.type, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureMetadataFormat>().Serialize(ref writer, value.format, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureMetadataQuality>().Serialize(ref writer, value.quality, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureFilter>().Serialize(ref writer, value.filter, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureWrap>().Serialize(ref writer, value.wrapU, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureWrap>().Serialize(ref writer, value.wrapV, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureWrap>().Serialize(ref writer, value.wrapW, options);
            writer.Write(value.premultiplyAlpha);
            writer.Write(value.maxSize);
            writer.Write(value.useMipmaps);
            writer.Write(value.isLinear);
            writer.Write(value.spriteScale);
            writer.Write(value.readBack);
        }

        public global::Staple.Internal.TextureMetadata Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.TextureMetadata();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.guid = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.type = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.format = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureMetadataFormat>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.quality = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureMetadataQuality>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.filter = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureFilter>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.wrapU = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureWrap>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.wrapV = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureWrap>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        ____result.wrapW = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureWrap>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        ____result.premultiplyAlpha = reader.ReadBoolean();
                        break;
                    case 9:
                        ____result.maxSize = reader.ReadInt32();
                        break;
                    case 10:
                        ____result.useMipmaps = reader.ReadBoolean();
                        break;
                    case 11:
                        ____result.isLinear = reader.ReadBoolean();
                        break;
                    case 12:
                        ____result.spriteScale = reader.ReadSingle();
                        break;
                    case 13:
                        ____result.readBack = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Vector2HolderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.Vector2Holder>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.Vector2Holder value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        public global::Staple.Internal.Vector2Holder Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.Vector2Holder();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.x = reader.ReadSingle();
                        break;
                    case 1:
                        ____result.y = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Vector3HolderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.Vector3Holder>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.Vector3Holder value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(3);
            writer.Write(value.x);
            writer.Write(value.y);
            writer.Write(value.z);
        }

        public global::Staple.Internal.Vector3Holder Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.Vector3Holder();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.x = reader.ReadSingle();
                        break;
                    case 1:
                        ____result.y = reader.ReadSingle();
                        break;
                    case 2:
                        ____result.z = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Vector4HolderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.Vector4Holder>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.Vector4Holder value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(4);
            writer.Write(value.x);
            writer.Write(value.y);
            writer.Write(value.z);
            writer.Write(value.w);
        }

        public global::Staple.Internal.Vector4Holder Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.Vector4Holder();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.x = reader.ReadSingle();
                        break;
                    case 1:
                        ____result.y = reader.ReadSingle();
                        break;
                    case 2:
                        ____result.z = reader.ReadSingle();
                        break;
                    case 3:
                        ____result.w = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

