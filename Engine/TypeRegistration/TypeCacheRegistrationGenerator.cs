using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Linq;
using System.Text;

namespace Staple
{
    [Generator]
    public class TypeCacheRegistrationGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            var source = $@"// <auto-generated />
using System;

namespace Staple
{{
    public static class TypeCacheRegistration
    {{
        public static void RegisterAll()
        {{
";

            var symbols = context.Compilation.SourceModule.ReferencedAssemblySymbols
                .Concat(new IAssemblySymbol[] { context.Compilation.SourceModule.ContainingAssembly });

            foreach (var symbol in symbols)
            {
                foreach (var n in symbol.GlobalNamespace.GetNamespaceMembers())
                {
                    foreach (var t in n.GetTypeMembers())
                    {
                        if (t.AllInterfaces.Any(x => x.Name == "IEntitySystem" || x.Name == "IComponent"))
                        {
                            //source += $"            Console.WriteLine(\"Registering {t.ContainingNamespace.Name}.{t.Name}\");\n\n";
                            source += $"            TypeCache.RegisterType(typeof({t.ContainingNamespace.Name}.{t.Name}));\n";
                        }
                    }
                }
            }

            source += $@"
        }}
    }}
}}";

            context.AddSource("TypeCacheRegistrationGenerated.cs", SourceText.From(source, Encoding.UTF8));
        }

        public void Initialize(GeneratorInitializationContext context)
        {
        }
    }
}
