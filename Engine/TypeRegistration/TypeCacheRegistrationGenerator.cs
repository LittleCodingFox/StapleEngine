using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Staple
{
    [Generator]
    public class TypeCacheRegistrationGenerator : ISourceGenerator
    {

        private static List<string> validInterfaces = new string[]
        {
            "IEntitySystem",
            "IComponent",
            "IPathAsset",
            "IStapleAsset",
        }.ToList();

        public void Execute(GeneratorExecutionContext context)
        {
            var source = $@"// <auto-generated />
using System;

namespace Staple
{{
    public static class TypeCacheRegistration
    {{
        public static void RegisterAll()
        {{
            TypeCache.Clear();
";

            void Perform(IAssemblySymbol symbol, bool isSelf)
            {
                void HandleType(INamedTypeSymbol t, string baseTypeName)
                {
                    if (t.IsAbstract ||
                        (t.DeclaredAccessibility != Accessibility.Public &&
                        (t.DeclaredAccessibility != Accessibility.Internal || isSelf == false)))
                    {
                        //source += $"            //Ignoring type {t.Name}: {t.DeclaredAccessibility}\r\n";

                        return;
                    }

                    var isValid = t.AllInterfaces.Any(x => validInterfaces.Contains(x.Name));

                    isValid |= t.EnumUnderlyingType != null;

                    var typeName = $"{baseTypeName}.{t.Name}";

                    if (isValid)
                    {
                        //source += $"            Console.WriteLine(\"Registering {typeName}\");\r\n\r\n";
                        source += $"            TypeCache.RegisterType(typeof({typeName}));\r\n";
                    }
                    else
                    {
                        //source += $"            //Ignoring type {typeName}: {t.DeclaredAccessibility}\r\n";
                    }

                    foreach(var type in t.GetTypeMembers())
                    {
                        HandleType(type, $"{baseTypeName}.{t.Name}");
                    }
                }

                foreach (var n in symbol.GlobalNamespace.GetNamespaceMembers())
                {
                    if (n.Name == "System")
                    {
                        continue;
                    }

                    foreach (var t in n.GetTypeMembers())
                    {
                        HandleType(t, n.Name);
                    }
                }
            }

            foreach(var symbol in context.Compilation.SourceModule.ReferencedAssemblySymbols)
            {
                Perform(symbol, false);
            }

            Perform(context.Compilation.SourceModule.ContainingAssembly, true);

            source += $@"
        }}
    }}
}}";

            context.AddSource("TypeCacheRegistration.Generated.cs", SourceText.From(source, Encoding.UTF8));
        }

        public void Initialize(GeneratorInitializationContext context)
        {
        }
    }
}
